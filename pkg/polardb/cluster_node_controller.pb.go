// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster_node_controller.proto

package polardb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Member_Role int32

const (
	Member_INACTIVE Member_Role = 0
	Member_MASTER   Member_Role = 1
	Member_REPLICA  Member_Role = 2
	Member_STANDBY  Member_Role = 3
	Member_DATAMAX  Member_Role = 4
)

var Member_Role_name = map[int32]string{
	0: "INACTIVE",
	1: "MASTER",
	2: "REPLICA",
	3: "STANDBY",
	4: "DATAMAX",
}

var Member_Role_value = map[string]int32{
	"INACTIVE": 0,
	"MASTER":   1,
	"REPLICA":  2,
	"STANDBY":  3,
	"DATAMAX":  4,
}

func (x Member_Role) String() string {
	return proto.EnumName(Member_Role_name, int32(x))
}

func (Member_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{0, 0}
}

type Member_Status int32

const (
	Member_Running Member_Status = 0
	Member_Stopped Member_Status = 1
)

var Member_Status_name = map[int32]string{
	0: "Running",
	1: "Stopped",
}

var Member_Status_value = map[string]int32{
	"Running": 0,
	"Stopped": 1,
}

func (x Member_Status) String() string {
	return proto.EnumName(Member_Status_name, int32(x))
}

func (Member_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{0, 1}
}

type Member_AccessMode int32

const (
	Member_ReadOnly  Member_AccessMode = 0
	Member_ReadWrite Member_AccessMode = 1
)

var Member_AccessMode_name = map[int32]string{
	0: "ReadOnly",
	1: "ReadWrite",
}

var Member_AccessMode_value = map[string]int32{
	"ReadOnly":  0,
	"ReadWrite": 1,
}

func (x Member_AccessMode) String() string {
	return proto.EnumName(Member_AccessMode_name, int32(x))
}

func (Member_AccessMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{0, 2}
}

type NodeNotifyHAStateResponse_Status int32

const (
	NodeNotifyHAStateResponse_Succeed  NodeNotifyHAStateResponse_Status = 0
	NodeNotifyHAStateResponse_Failed   NodeNotifyHAStateResponse_Status = 1
	NodeNotifyHAStateResponse_Canceled NodeNotifyHAStateResponse_Status = 2
	NodeNotifyHAStateResponse_Running  NodeNotifyHAStateResponse_Status = 3
)

var NodeNotifyHAStateResponse_Status_name = map[int32]string{
	0: "Succeed",
	1: "Failed",
	2: "Canceled",
	3: "Running",
}

var NodeNotifyHAStateResponse_Status_value = map[string]int32{
	"Succeed":  0,
	"Failed":   1,
	"Canceled": 2,
	"Running":  3,
}

func (x NodeNotifyHAStateResponse_Status) String() string {
	return proto.EnumName(NodeNotifyHAStateResponse_Status_name, int32(x))
}

func (NodeNotifyHAStateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{4, 0}
}

type Member struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Role                 Member_Role       `protobuf:"varint,2,opt,name=role,proto3,enum=polardb.Member_Role" json:"role,omitempty"`
	Status               Member_Status     `protobuf:"varint,3,opt,name=status,proto3,enum=polardb.Member_Status" json:"status,omitempty"`
	AccessMode           Member_AccessMode `protobuf:"varint,4,opt,name=access_mode,json=accessMode,proto3,enum=polardb.Member_AccessMode" json:"access_mode,omitempty"`
	Context              map[string]string `protobuf:"bytes,5,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PodName              string            `protobuf:"bytes,6,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{0}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Member.Unmarshal(m, b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Member.Marshal(b, m, deterministic)
}
func (dst *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(dst, src)
}
func (m *Member) XXX_Size() int {
	return xxx_messageInfo_Member.Size(m)
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Member) GetRole() Member_Role {
	if m != nil {
		return m.Role
	}
	return Member_INACTIVE
}

func (m *Member) GetStatus() Member_Status {
	if m != nil {
		return m.Status
	}
	return Member_Running
}

func (m *Member) GetAccessMode() Member_AccessMode {
	if m != nil {
		return m.AccessMode
	}
	return Member_ReadOnly
}

func (m *Member) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Member) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

type GetStateRequest struct {
	TxId                 string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Member               *Member  `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateRequest) Reset()         { *m = GetStateRequest{} }
func (m *GetStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetStateRequest) ProtoMessage()    {}
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{1}
}
func (m *GetStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateRequest.Unmarshal(m, b)
}
func (m *GetStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateRequest.Marshal(b, m, deterministic)
}
func (dst *GetStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateRequest.Merge(dst, src)
}
func (m *GetStateRequest) XXX_Size() int {
	return xxx_messageInfo_GetStateRequest.Size(m)
}
func (m *GetStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateRequest proto.InternalMessageInfo

func (m *GetStateRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *GetStateRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *GetStateRequest) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *GetStateRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type GetStateResponse struct {
	TxId                 string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Member               *Member  `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
	State                string   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Namespace            string   `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateResponse) Reset()         { *m = GetStateResponse{} }
func (m *GetStateResponse) String() string { return proto.CompactTextString(m) }
func (*GetStateResponse) ProtoMessage()    {}
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{2}
}
func (m *GetStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateResponse.Unmarshal(m, b)
}
func (m *GetStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateResponse.Marshal(b, m, deterministic)
}
func (dst *GetStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateResponse.Merge(dst, src)
}
func (m *GetStateResponse) XXX_Size() int {
	return xxx_messageInfo_GetStateResponse.Size(m)
}
func (m *GetStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateResponse proto.InternalMessageInfo

func (m *GetStateResponse) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *GetStateResponse) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *GetStateResponse) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *GetStateResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *GetStateResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type NodeNotifyHAStateRequest struct {
	TxId                 string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Member               *Member  `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeNotifyHAStateRequest) Reset()         { *m = NodeNotifyHAStateRequest{} }
func (m *NodeNotifyHAStateRequest) String() string { return proto.CompactTextString(m) }
func (*NodeNotifyHAStateRequest) ProtoMessage()    {}
func (*NodeNotifyHAStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{3}
}
func (m *NodeNotifyHAStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeNotifyHAStateRequest.Unmarshal(m, b)
}
func (m *NodeNotifyHAStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeNotifyHAStateRequest.Marshal(b, m, deterministic)
}
func (dst *NodeNotifyHAStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeNotifyHAStateRequest.Merge(dst, src)
}
func (m *NodeNotifyHAStateRequest) XXX_Size() int {
	return xxx_messageInfo_NodeNotifyHAStateRequest.Size(m)
}
func (m *NodeNotifyHAStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeNotifyHAStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeNotifyHAStateRequest proto.InternalMessageInfo

func (m *NodeNotifyHAStateRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *NodeNotifyHAStateRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NodeNotifyHAStateRequest) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *NodeNotifyHAStateRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type NodeNotifyHAStateResponse struct {
	TxId                 string                           `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ClusterId            string                           `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Status               NodeNotifyHAStateResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=polardb.NodeNotifyHAStateResponse_Status" json:"status,omitempty"`
	Member               *Member                          `protobuf:"bytes,4,opt,name=member,proto3" json:"member,omitempty"`
	Detail               string                           `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Progress             uint32                           `protobuf:"varint,6,opt,name=progress,proto3" json:"progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *NodeNotifyHAStateResponse) Reset()         { *m = NodeNotifyHAStateResponse{} }
func (m *NodeNotifyHAStateResponse) String() string { return proto.CompactTextString(m) }
func (*NodeNotifyHAStateResponse) ProtoMessage()    {}
func (*NodeNotifyHAStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df8d1d63418534fa, []int{4}
}
func (m *NodeNotifyHAStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeNotifyHAStateResponse.Unmarshal(m, b)
}
func (m *NodeNotifyHAStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeNotifyHAStateResponse.Marshal(b, m, deterministic)
}
func (dst *NodeNotifyHAStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeNotifyHAStateResponse.Merge(dst, src)
}
func (m *NodeNotifyHAStateResponse) XXX_Size() int {
	return xxx_messageInfo_NodeNotifyHAStateResponse.Size(m)
}
func (m *NodeNotifyHAStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeNotifyHAStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeNotifyHAStateResponse proto.InternalMessageInfo

func (m *NodeNotifyHAStateResponse) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *NodeNotifyHAStateResponse) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NodeNotifyHAStateResponse) GetStatus() NodeNotifyHAStateResponse_Status {
	if m != nil {
		return m.Status
	}
	return NodeNotifyHAStateResponse_Succeed
}

func (m *NodeNotifyHAStateResponse) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *NodeNotifyHAStateResponse) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *NodeNotifyHAStateResponse) GetProgress() uint32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func init() {
	proto.RegisterType((*Member)(nil), "polardb.Member")
	proto.RegisterMapType((map[string]string)(nil), "polardb.Member.ContextEntry")
	proto.RegisterType((*GetStateRequest)(nil), "polardb.GetStateRequest")
	proto.RegisterType((*GetStateResponse)(nil), "polardb.GetStateResponse")
	proto.RegisterType((*NodeNotifyHAStateRequest)(nil), "polardb.NodeNotifyHAStateRequest")
	proto.RegisterType((*NodeNotifyHAStateResponse)(nil), "polardb.NodeNotifyHAStateResponse")
	proto.RegisterEnum("polardb.Member_Role", Member_Role_name, Member_Role_value)
	proto.RegisterEnum("polardb.Member_Status", Member_Status_name, Member_Status_value)
	proto.RegisterEnum("polardb.Member_AccessMode", Member_AccessMode_name, Member_AccessMode_value)
	proto.RegisterEnum("polardb.NodeNotifyHAStateResponse_Status", NodeNotifyHAStateResponse_Status_name, NodeNotifyHAStateResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterNodeControllerClient is the client API for ClusterNodeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterNodeControllerClient interface {
	// Bidirectional stream, allow later state interruption and initial server side status feedback
	NodeNotifyHAState(ctx context.Context, opts ...grpc.CallOption) (ClusterNodeController_NodeNotifyHAStateClient, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type clusterNodeControllerClient struct {
	cc *grpc.ClientConn
}

func NewClusterNodeControllerClient(cc *grpc.ClientConn) ClusterNodeControllerClient {
	return &clusterNodeControllerClient{cc}
}

func (c *clusterNodeControllerClient) NodeNotifyHAState(ctx context.Context, opts ...grpc.CallOption) (ClusterNodeController_NodeNotifyHAStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClusterNodeController_serviceDesc.Streams[0], "/polardb.ClusterNodeController/NodeNotifyHAState", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterNodeControllerNodeNotifyHAStateClient{stream}
	return x, nil
}

type ClusterNodeController_NodeNotifyHAStateClient interface {
	Send(*NodeNotifyHAStateRequest) error
	Recv() (*NodeNotifyHAStateResponse, error)
	grpc.ClientStream
}

type clusterNodeControllerNodeNotifyHAStateClient struct {
	grpc.ClientStream
}

func (x *clusterNodeControllerNodeNotifyHAStateClient) Send(m *NodeNotifyHAStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterNodeControllerNodeNotifyHAStateClient) Recv() (*NodeNotifyHAStateResponse, error) {
	m := new(NodeNotifyHAStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterNodeControllerClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/polardb.ClusterNodeController/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterNodeControllerServer is the server API for ClusterNodeController service.
type ClusterNodeControllerServer interface {
	// Bidirectional stream, allow later state interruption and initial server side status feedback
	NodeNotifyHAState(ClusterNodeController_NodeNotifyHAStateServer) error
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
}

func RegisterClusterNodeControllerServer(s *grpc.Server, srv ClusterNodeControllerServer) {
	s.RegisterService(&_ClusterNodeController_serviceDesc, srv)
}

func _ClusterNodeController_NodeNotifyHAState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterNodeControllerServer).NodeNotifyHAState(&clusterNodeControllerNodeNotifyHAStateServer{stream})
}

type ClusterNodeController_NodeNotifyHAStateServer interface {
	Send(*NodeNotifyHAStateResponse) error
	Recv() (*NodeNotifyHAStateRequest, error)
	grpc.ServerStream
}

type clusterNodeControllerNodeNotifyHAStateServer struct {
	grpc.ServerStream
}

func (x *clusterNodeControllerNodeNotifyHAStateServer) Send(m *NodeNotifyHAStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterNodeControllerNodeNotifyHAStateServer) Recv() (*NodeNotifyHAStateRequest, error) {
	m := new(NodeNotifyHAStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClusterNodeController_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterNodeControllerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polardb.ClusterNodeController/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterNodeControllerServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterNodeController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "polardb.ClusterNodeController",
	HandlerType: (*ClusterNodeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _ClusterNodeController_GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeNotifyHAState",
			Handler:       _ClusterNodeController_NodeNotifyHAState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cluster_node_controller.proto",
}

func init() { proto.RegisterFile("cluster_node_controller.proto", fileDescriptor_df8d1d63418534fa) }

var fileDescriptor_df8d1d63418534fa = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0xf3, 0x70, 0x92, 0x9b, 0x3e, 0xcc, 0x50, 0x2a, 0x37, 0xb4, 0x52, 0xf1, 0x86, 0x74,
	0x93, 0xa2, 0x20, 0x21, 0x54, 0xd8, 0x98, 0x34, 0x94, 0x48, 0x24, 0xa0, 0x49, 0xc4, 0x63, 0x15,
	0x1c, 0xcf, 0x6d, 0x64, 0xe1, 0x78, 0x8c, 0x3d, 0x46, 0xcd, 0x3f, 0xb0, 0xe5, 0x0b, 0x58, 0xf3,
	0x07, 0x7c, 0x07, 0xdf, 0x83, 0x66, 0xec, 0x24, 0xc5, 0x94, 0xb2, 0x40, 0x48, 0xec, 0x7c, 0x66,
	0xce, 0x1d, 0xdf, 0x73, 0xe6, 0x9e, 0x81, 0x03, 0xd7, 0x4f, 0x62, 0x81, 0xd1, 0x24, 0xe0, 0x0c,
	0x27, 0x2e, 0x0f, 0x44, 0xc4, 0x7d, 0x1f, 0xa3, 0x76, 0x18, 0x71, 0xc1, 0x49, 0x35, 0xe4, 0xbe,
	0x13, 0xb1, 0x69, 0xf3, 0xf6, 0x8c, 0xf3, 0x99, 0x8f, 0xc7, 0x6a, 0x79, 0x9a, 0x9c, 0x1f, 0xe3,
	0x3c, 0x14, 0x8b, 0x94, 0x65, 0x7d, 0x2f, 0x81, 0x3e, 0xc0, 0xf9, 0x14, 0x23, 0xb2, 0x05, 0x45,
	0x8f, 0x99, 0xda, 0xa1, 0xd6, 0xaa, 0xd3, 0xa2, 0xc7, 0x48, 0x0b, 0xca, 0x11, 0xf7, 0xd1, 0x2c,
	0x1e, 0x6a, 0xad, 0xad, 0xce, 0x4e, 0x3b, 0x3b, 0xaf, 0x9d, 0xd2, 0xdb, 0x94, 0xfb, 0x48, 0x15,
	0x83, 0xb4, 0x41, 0x8f, 0x85, 0x23, 0x92, 0xd8, 0x2c, 0x29, 0xee, 0x6e, 0x9e, 0x3b, 0x52, 0xbb,
	0x34, 0x63, 0x91, 0x47, 0xd0, 0x70, 0x5c, 0x17, 0xe3, 0x78, 0x32, 0xe7, 0x0c, 0xcd, 0xb2, 0x2a,
	0x6a, 0xe6, 0x8b, 0x6c, 0x45, 0x19, 0x70, 0x86, 0x14, 0x9c, 0xd5, 0x37, 0x79, 0x00, 0x55, 0xa9,
	0x15, 0x2f, 0x84, 0x59, 0x39, 0x2c, 0xb5, 0x1a, 0x9d, 0xfd, 0x7c, 0x61, 0x37, 0xdd, 0xee, 0x05,
	0x22, 0x5a, 0xd0, 0x25, 0x99, 0xec, 0x41, 0x2d, 0xe4, 0x6c, 0x12, 0x38, 0x73, 0x34, 0x75, 0x25,
	0xb2, 0x1a, 0x72, 0x36, 0x74, 0xe6, 0xd8, 0x3c, 0x81, 0x8d, 0xcb, 0x35, 0xc4, 0x80, 0xd2, 0x7b,
	0x5c, 0x64, 0x56, 0xc8, 0x4f, 0xb2, 0x03, 0x95, 0x8f, 0x8e, 0x9f, 0xa4, 0x66, 0xd4, 0x69, 0x0a,
	0x4e, 0x8a, 0x0f, 0x35, 0xeb, 0x0c, 0xca, 0xd2, 0x09, 0xb2, 0x01, 0xb5, 0xfe, 0xd0, 0xee, 0x8e,
	0xfb, 0xaf, 0x7a, 0x46, 0x81, 0x00, 0xe8, 0x03, 0x7b, 0x34, 0xee, 0x51, 0x43, 0x23, 0x0d, 0xa8,
	0xd2, 0xde, 0xcb, 0xe7, 0xfd, 0xae, 0x6d, 0x14, 0x25, 0x18, 0x8d, 0xed, 0xe1, 0xe9, 0x93, 0xb7,
	0x46, 0x49, 0x82, 0x53, 0x7b, 0x6c, 0x0f, 0xec, 0x37, 0x46, 0xd9, 0xb2, 0x40, 0x4f, 0x6d, 0x52,
	0x05, 0x49, 0x10, 0x78, 0xc1, 0xcc, 0x28, 0xa8, 0x02, 0xc1, 0xc3, 0x10, 0x99, 0xa1, 0x59, 0x47,
	0x00, 0x6b, 0x57, 0xe4, 0x2f, 0x29, 0x3a, 0xec, 0x45, 0xe0, 0x2f, 0x8c, 0x02, 0xd9, 0x84, 0xba,
	0x44, 0xaf, 0x23, 0x4f, 0xa0, 0xa1, 0x59, 0x9f, 0x34, 0xd8, 0x3e, 0x43, 0x21, 0x8f, 0x44, 0x8a,
	0x1f, 0x12, 0x8c, 0x05, 0xb9, 0x09, 0x15, 0x71, 0x31, 0x59, 0x5d, 0x72, 0x59, 0x5c, 0xf4, 0x19,
	0x39, 0x00, 0x58, 0x0e, 0x92, 0xc7, 0x32, 0x7d, 0xf5, 0x6c, 0xa5, 0xcf, 0xc8, 0x5d, 0xd0, 0xe7,
	0xca, 0x56, 0x75, 0xb7, 0x8d, 0xce, 0x76, 0xce, 0x6d, 0x9a, 0x6d, 0x93, 0x7d, 0xa8, 0x4b, 0x6f,
	0xe3, 0xd0, 0x71, 0xd3, 0x2b, 0xad, 0xd3, 0xf5, 0x82, 0xf5, 0x45, 0x03, 0x63, 0xdd, 0x4e, 0x1c,
	0xf2, 0x20, 0xc6, 0x7f, 0xdb, 0xcf, 0x0e, 0x54, 0xe4, 0xb8, 0x2d, 0x7b, 0x49, 0xc1, 0xcf, 0x5d,
	0x56, 0xf2, 0x5d, 0x7e, 0xd6, 0xc0, 0x1c, 0x72, 0x86, 0x43, 0x2e, 0xbc, 0xf3, 0xc5, 0x33, 0xfb,
	0x7f, 0x71, 0xef, 0x6b, 0x11, 0xf6, 0xae, 0xe8, 0xeb, 0x2f, 0x6c, 0xb4, 0x73, 0x91, 0x3d, 0x5a,
	0x35, 0xf6, 0xdb, 0xff, 0xe4, 0x53, 0xbc, 0xd6, 0x56, 0xbe, 0x5e, 0xdb, 0x2e, 0xe8, 0x0c, 0x85,
	0xe3, 0xf9, 0x99, 0xe1, 0x19, 0x22, 0x4d, 0xa8, 0x85, 0x11, 0x9f, 0x45, 0x18, 0xc7, 0x2a, 0x91,
	0x9b, 0x74, 0x85, 0xad, 0xc7, 0x97, 0xd3, 0x30, 0x4a, 0x5c, 0x17, 0x91, 0xa5, 0xb9, 0x7a, 0xea,
	0x78, 0xbe, 0x0c, 0x83, 0x1c, 0xff, 0xae, 0x13, 0xb8, 0x28, 0x51, 0xf1, 0x72, 0x68, 0x4a, 0x9d,
	0x6f, 0x1a, 0xdc, 0xea, 0xa6, 0x5a, 0xa5, 0x9c, 0xee, 0xea, 0x6d, 0x24, 0xef, 0xe0, 0xc6, 0x2f,
	0x02, 0xc9, 0x9d, 0xeb, 0xc4, 0xab, 0xcb, 0x6f, 0x5a, 0x7f, 0xf6, 0xc7, 0x2a, 0xb4, 0xb4, 0x7b,
	0x1a, 0xb1, 0xa1, 0xb6, 0x1c, 0x74, 0x62, 0xae, 0xaa, 0x72, 0x51, 0x6c, 0xee, 0x5d, 0xb1, 0xb3,
	0x3c, 0x66, 0xaa, 0xab, 0xb7, 0xf9, 0xfe, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xea, 0x6c,
	0xaa, 0xe2, 0x05, 0x00, 0x00,
}
