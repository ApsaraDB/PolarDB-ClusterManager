syntax = "proto3";

import "google/protobuf/empty.proto";

// https://grpc.io/docs/what-is-grpc/core-concepts/

package polardb;

service ClusterNodeController {
    // Bidirectional stream, allow later state interruption and initial server side status feedback
    rpc NodeNotifyHAState (stream NodeNotifyHAStateRequest) returns (stream NodeNotifyHAStateResponse) {
    }

    rpc GetState (GetStateRequest) returns (GetStateResponse) {
    }
}

message Member {
    enum Role {
        INACTIVE = 0;
        MASTER = 1;
        REPLICA = 2;
        STANDBY = 3;
        DATAMAX = 4;
    }

    enum Status {
        Running = 0;
        Stopped = 1;
    }

    enum AccessMode {
        ReadOnly = 0;
        ReadWrite = 1;
    }

    string id = 1; // instance data dir: /disk1/polardb_pg/${cluster_id}/${member_id}/data
    Role role = 2;
    Status status = 3;
    AccessMode access_mode = 4;
    map<string, string> context = 5;
    string pod_name = 6;
}

message GetStateRequest {
    string tx_id = 1;
    string cluster_id = 2;
    Member member = 3;
    string namespace = 4;
}

message GetStateResponse {
    string tx_id = 1;
    string cluster_id = 2;
    Member member = 3;
    string state = 4;
    string namespace = 5;
}

message NodeNotifyHAStateRequest {
    string tx_id = 1; // transaction ID
    string cluster_id = 2; // will validate provisioned cluster_id
    Member member = 3; // will validate provisioned member_id
    string namespace = 4;
}

message NodeNotifyHAStateResponse {
    enum Status {
        Succeed = 0;
        Failed = 1;
        Canceled = 2;
        Running = 3;
    }
    string tx_id = 1;
    string cluster_id = 2;
    Status status = 3;
    Member member = 4;
    string detail = 5;
    uint32 progress = 6;
}
